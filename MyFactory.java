package Ontology;

import Ontology.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Mon Nov 02 00:41:37 WAT 2015 by oyindolapo
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#AGE
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#AGE", AGE.class, DefaultAGE.class);
    }

    /**
     * Creates an instance of type AGE.  Modifies the underlying ontology.
     */
    public AGE createAGE(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGE, DefaultAGE.class);
    }

    /**
     * Gets an instance of type AGE with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AGE getAGE(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGE, DefaultAGE.class);
    }

    /**
     * Gets all instances of AGE from the ontology.
     */
    public Collection<? extends AGE> getAllAGEInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGE, DefaultAGE.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CATARACT
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CATARACT", CATARACT.class, DefaultCATARACT.class);
    }

    /**
     * Creates an instance of type CATARACT.  Modifies the underlying ontology.
     */
    public CATARACT createCATARACT(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CATARACT, DefaultCATARACT.class);
    }

    /**
     * Gets an instance of type CATARACT with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CATARACT getCATARACT(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CATARACT, DefaultCATARACT.class);
    }

    /**
     * Gets all instances of CATARACT from the ontology.
     */
    public Collection<? extends CATARACT> getAllCATARACTInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CATARACT, DefaultCATARACT.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CLASSIFICATION_and_PREDICTION
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CLASSIFICATION_and_PREDICTION", CLASSIFICATION_and_PREDICTION.class, DefaultCLASSIFICATION_and_PREDICTION.class);
    }

    /**
     * Creates an instance of type CLASSIFICATION_and_PREDICTION.  Modifies the underlying ontology.
     */
    public CLASSIFICATION_and_PREDICTION createCLASSIFICATION_and_PREDICTION(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLASSIFICATION_AND_PREDICTION, DefaultCLASSIFICATION_and_PREDICTION.class);
    }

    /**
     * Gets an instance of type CLASSIFICATION_and_PREDICTION with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CLASSIFICATION_and_PREDICTION getCLASSIFICATION_and_PREDICTION(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLASSIFICATION_AND_PREDICTION, DefaultCLASSIFICATION_and_PREDICTION.class);
    }

    /**
     * Gets all instances of CLASSIFICATION_and_PREDICTION from the ontology.
     */
    public Collection<? extends CLASSIFICATION_and_PREDICTION> getAllCLASSIFICATION_and_PREDICTIONInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLASSIFICATION_AND_PREDICTION, DefaultCLASSIFICATION_and_PREDICTION.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#COMORBID
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#COMORBID", COMORBID.class, DefaultCOMORBID.class);
    }

    /**
     * Creates an instance of type COMORBID.  Modifies the underlying ontology.
     */
    public COMORBID createCOMORBID(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMORBID, DefaultCOMORBID.class);
    }

    /**
     * Gets an instance of type COMORBID with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public COMORBID getCOMORBID(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMORBID, DefaultCOMORBID.class);
    }

    /**
     * Gets all instances of COMORBID from the ontology.
     */
    public Collection<? extends COMORBID> getAllCOMORBIDInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMORBID, DefaultCOMORBID.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CONSULTATION
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CONSULTATION", CONSULTATION.class, DefaultCONSULTATION.class);
    }

    /**
     * Creates an instance of type CONSULTATION.  Modifies the underlying ontology.
     */
    public CONSULTATION createCONSULTATION(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONSULTATION, DefaultCONSULTATION.class);
    }

    /**
     * Gets an instance of type CONSULTATION with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CONSULTATION getCONSULTATION(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONSULTATION, DefaultCONSULTATION.class);
    }

    /**
     * Gets all instances of CONSULTATION from the ontology.
     */
    public Collection<? extends CONSULTATION> getAllCONSULTATIONInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONSULTATION, DefaultCONSULTATION.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CORNEAL_THICKNESS
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CORNEAL_THICKNESS", CORNEAL_THICKNESS.class, DefaultCORNEAL_THICKNESS.class);
    }

    /**
     * Creates an instance of type CORNEAL_THICKNESS.  Modifies the underlying ontology.
     */
    public CORNEAL_THICKNESS createCORNEAL_THICKNESS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CORNEAL_THICKNESS, DefaultCORNEAL_THICKNESS.class);
    }

    /**
     * Gets an instance of type CORNEAL_THICKNESS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CORNEAL_THICKNESS getCORNEAL_THICKNESS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CORNEAL_THICKNESS, DefaultCORNEAL_THICKNESS.class);
    }

    /**
     * Gets all instances of CORNEAL_THICKNESS from the ontology.
     */
    public Collection<? extends CORNEAL_THICKNESS> getAllCORNEAL_THICKNESSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CORNEAL_THICKNESS, DefaultCORNEAL_THICKNESS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CP_ENTRY
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#CP_ENTRY", CP_ENTRY.class, DefaultCP_ENTRY.class);
    }

    /**
     * Creates an instance of type CP_ENTRY.  Modifies the underlying ontology.
     */
    public CP_ENTRY createCP_ENTRY(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CP_ENTRY, DefaultCP_ENTRY.class);
    }

    /**
     * Gets an instance of type CP_ENTRY with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CP_ENTRY getCP_ENTRY(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CP_ENTRY, DefaultCP_ENTRY.class);
    }

    /**
     * Gets all instances of CP_ENTRY from the ontology.
     */
    public Collection<? extends CP_ENTRY> getAllCP_ENTRYInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CP_ENTRY, DefaultCP_ENTRY.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#DECISIONS
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#DECISIONS", DECISIONS.class, DefaultDECISIONS.class);
    }

    /**
     * Creates an instance of type DECISIONS.  Modifies the underlying ontology.
     */
    public DECISIONS createDECISIONS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DECISIONS, DefaultDECISIONS.class);
    }

    /**
     * Gets an instance of type DECISIONS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DECISIONS getDECISIONS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DECISIONS, DefaultDECISIONS.class);
    }

    /**
     * Gets all instances of DECISIONS from the ontology.
     */
    public Collection<? extends DECISIONS> getAllDECISIONSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DECISIONS, DefaultDECISIONS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#EVALUATION_OF_RESULTS
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#EVALUATION_OF_RESULTS", EVALUATION_OF_RESULTS.class, DefaultEVALUATION_OF_RESULTS.class);
    }

    /**
     * Creates an instance of type EVALUATION_OF_RESULTS.  Modifies the underlying ontology.
     */
    public EVALUATION_OF_RESULTS createEVALUATION_OF_RESULTS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EVALUATION_OF_RESULTS, DefaultEVALUATION_OF_RESULTS.class);
    }

    /**
     * Gets an instance of type EVALUATION_OF_RESULTS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EVALUATION_OF_RESULTS getEVALUATION_OF_RESULTS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EVALUATION_OF_RESULTS, DefaultEVALUATION_OF_RESULTS.class);
    }

    /**
     * Gets all instances of EVALUATION_OF_RESULTS from the ontology.
     */
    public Collection<? extends EVALUATION_OF_RESULTS> getAllEVALUATION_OF_RESULTSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EVALUATION_OF_RESULTS, DefaultEVALUATION_OF_RESULTS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#FAMILY_HISTORY
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#FAMILY_HISTORY", FAMILY_HISTORY.class, DefaultFAMILY_HISTORY.class);
    }

    /**
     * Creates an instance of type FAMILY_HISTORY.  Modifies the underlying ontology.
     */
    public FAMILY_HISTORY createFAMILY_HISTORY(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FAMILY_HISTORY, DefaultFAMILY_HISTORY.class);
    }

    /**
     * Gets an instance of type FAMILY_HISTORY with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FAMILY_HISTORY getFAMILY_HISTORY(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FAMILY_HISTORY, DefaultFAMILY_HISTORY.class);
    }

    /**
     * Gets all instances of FAMILY_HISTORY from the ontology.
     */
    public Collection<? extends FAMILY_HISTORY> getAllFAMILY_HISTORYInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FAMILY_HISTORY, DefaultFAMILY_HISTORY.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#FEEDBACK
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#FEEDBACK", FEEDBACK.class, DefaultFEEDBACK.class);
    }

    /**
     * Creates an instance of type FEEDBACK.  Modifies the underlying ontology.
     */
    public FEEDBACK createFEEDBACK(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEEDBACK, DefaultFEEDBACK.class);
    }

    /**
     * Gets an instance of type FEEDBACK with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FEEDBACK getFEEDBACK(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEEDBACK, DefaultFEEDBACK.class);
    }

    /**
     * Gets all instances of FEEDBACK from the ontology.
     */
    public Collection<? extends FEEDBACK> getAllFEEDBACKInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEEDBACK, DefaultFEEDBACK.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#GLAUCOMA
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#GLAUCOMA", GLAUCOMA.class, DefaultGLAUCOMA.class);
    }

    /**
     * Creates an instance of type GLAUCOMA.  Modifies the underlying ontology.
     */
    public GLAUCOMA createGLAUCOMA(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GLAUCOMA, DefaultGLAUCOMA.class);
    }

    /**
     * Gets an instance of type GLAUCOMA with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GLAUCOMA getGLAUCOMA(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GLAUCOMA, DefaultGLAUCOMA.class);
    }

    /**
     * Gets all instances of GLAUCOMA from the ontology.
     */
    public Collection<? extends GLAUCOMA> getAllGLAUCOMAInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GLAUCOMA, DefaultGLAUCOMA.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#IOP
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#IOP", IOP.class, DefaultIOP.class);
    }

    /**
     * Creates an instance of type IOP.  Modifies the underlying ontology.
     */
    public IOP createIOP(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IOP, DefaultIOP.class);
    }

    /**
     * Gets an instance of type IOP with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IOP getIOP(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IOP, DefaultIOP.class);
    }

    /**
     * Gets all instances of IOP from the ontology.
     */
    public Collection<? extends IOP> getAllIOPInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IOP, DefaultIOP.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#LENS_CLARITY
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#LENS_CLARITY", LENS_CLARITY.class, DefaultLENS_CLARITY.class);
    }

    /**
     * Creates an instance of type LENS_CLARITY.  Modifies the underlying ontology.
     */
    public LENS_CLARITY createLENS_CLARITY(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LENS_CLARITY, DefaultLENS_CLARITY.class);
    }

    /**
     * Gets an instance of type LENS_CLARITY with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LENS_CLARITY getLENS_CLARITY(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LENS_CLARITY, DefaultLENS_CLARITY.class);
    }

    /**
     * Gets all instances of LENS_CLARITY from the ontology.
     */
    public Collection<? extends LENS_CLARITY> getAllLENS_CLARITYInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LENS_CLARITY, DefaultLENS_CLARITY.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#NONE
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#NONE", NONE.class, DefaultNONE.class);
    }

    /**
     * Creates an instance of type NONE.  Modifies the underlying ontology.
     */
    public NONE createNONE(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONE, DefaultNONE.class);
    }

    /**
     * Gets an instance of type NONE with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NONE getNONE(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONE, DefaultNONE.class);
    }

    /**
     * Gets all instances of NONE from the ontology.
     */
    public Collection<? extends NONE> getAllNONEInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONE, DefaultNONE.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#OCULAR_EXAMINATION_and_HISTORY
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#OCULAR_EXAMINATION_and_HISTORY", OCULAR_EXAMINATION_and_HISTORY.class, DefaultOCULAR_EXAMINATION_and_HISTORY.class);
    }

    /**
     * Creates an instance of type OCULAR_EXAMINATION_and_HISTORY.  Modifies the underlying ontology.
     */
    public OCULAR_EXAMINATION_and_HISTORY createOCULAR_EXAMINATION_and_HISTORY(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OCULAR_EXAMINATION_AND_HISTORY, DefaultOCULAR_EXAMINATION_and_HISTORY.class);
    }

    /**
     * Gets an instance of type OCULAR_EXAMINATION_and_HISTORY with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OCULAR_EXAMINATION_and_HISTORY getOCULAR_EXAMINATION_and_HISTORY(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OCULAR_EXAMINATION_AND_HISTORY, DefaultOCULAR_EXAMINATION_and_HISTORY.class);
    }

    /**
     * Gets all instances of OCULAR_EXAMINATION_and_HISTORY from the ontology.
     */
    public Collection<? extends OCULAR_EXAMINATION_and_HISTORY> getAllOCULAR_EXAMINATION_and_HISTORYInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OCULAR_EXAMINATION_AND_HISTORY, DefaultOCULAR_EXAMINATION_and_HISTORY.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#OPTIC_NERVE
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#OPTIC_NERVE", OPTIC_NERVE.class, DefaultOPTIC_NERVE.class);
    }

    /**
     * Creates an instance of type OPTIC_NERVE.  Modifies the underlying ontology.
     */
    public OPTIC_NERVE createOPTIC_NERVE(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPTIC_NERVE, DefaultOPTIC_NERVE.class);
    }

    /**
     * Gets an instance of type OPTIC_NERVE with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OPTIC_NERVE getOPTIC_NERVE(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPTIC_NERVE, DefaultOPTIC_NERVE.class);
    }

    /**
     * Gets all instances of OPTIC_NERVE from the ontology.
     */
    public Collection<? extends OPTIC_NERVE> getAllOPTIC_NERVEInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPTIC_NERVE, DefaultOPTIC_NERVE.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#PATIENT_EDUCATION
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#PATIENT_EDUCATION", PATIENT_EDUCATION.class, DefaultPATIENT_EDUCATION.class);
    }

    /**
     * Creates an instance of type PATIENT_EDUCATION.  Modifies the underlying ontology.
     */
    public PATIENT_EDUCATION createPATIENT_EDUCATION(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PATIENT_EDUCATION, DefaultPATIENT_EDUCATION.class);
    }

    /**
     * Gets an instance of type PATIENT_EDUCATION with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PATIENT_EDUCATION getPATIENT_EDUCATION(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PATIENT_EDUCATION, DefaultPATIENT_EDUCATION.class);
    }

    /**
     * Gets all instances of PATIENT_EDUCATION from the ontology.
     */
    public Collection<? extends PATIENT_EDUCATION> getAllPATIENT_EDUCATIONInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PATIENT_EDUCATION, DefaultPATIENT_EDUCATION.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#PATIENT_INFORMATION
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#PATIENT_INFORMATION", PATIENT_INFORMATION.class, DefaultPATIENT_INFORMATION.class);
    }

    /**
     * Creates an instance of type PATIENT_INFORMATION.  Modifies the underlying ontology.
     */
    public PATIENT_INFORMATION createPATIENT_INFORMATION(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PATIENT_INFORMATION, DefaultPATIENT_INFORMATION.class);
    }

    /**
     * Gets an instance of type PATIENT_INFORMATION with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PATIENT_INFORMATION getPATIENT_INFORMATION(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PATIENT_INFORMATION, DefaultPATIENT_INFORMATION.class);
    }

    /**
     * Gets all instances of PATIENT_INFORMATION from the ontology.
     */
    public Collection<? extends PATIENT_INFORMATION> getAllPATIENT_INFORMATIONInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PATIENT_INFORMATION, DefaultPATIENT_INFORMATION.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#PRESENCE_of_DISEASES
     */

    {
        javaMapping.add("http://www.semanticweb.org/oyindolapo/ontologies/2015/9/updated_ontology#PRESENCE_of_DISEASES", PRESENCE_of_DISEASES.class, DefaultPRESENCE_of_DISEASES.class);
    }

    /**
     * Creates an instance of type PRESENCE_of_DISEASES.  Modifies the underlying ontology.
     */
    public PRESENCE_of_DISEASES createPRESENCE_of_DISEASES(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESENCE_OF_DISEASES, DefaultPRESENCE_of_DISEASES.class);
    }

    /**
     * Gets an instance of type PRESENCE_of_DISEASES with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PRESENCE_of_DISEASES getPRESENCE_of_DISEASES(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESENCE_OF_DISEASES, DefaultPRESENCE_of_DISEASES.class);
    }

    /**
     * Gets all instances of PRESENCE_of_DISEASES from the ontology.
     */
    public Collection<? extends PRESENCE_of_DISEASES> getAllPRESENCE_of_DISEASESInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESENCE_OF_DISEASES, DefaultPRESENCE_of_DISEASES.class);
    }


}
